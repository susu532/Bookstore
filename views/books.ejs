<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <link rel="icon" href="/images/logo.png" />
  <title>Livres - Books garden‚Ñ¢</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/style.css">
  <style>
    body {
      background: linear-gradient(120deg, #f8fafc 0%, #e0e7ff 100%);
      min-height: 100vh;
    }
    .books-header {
      background: linear-gradient(90deg, #2575fc 0%, #6a11cb 100%);
      color: #fff;
      border-radius: 1rem;
      box-shadow: 0 4px 24px rgba(80,80,200,0.08);
      padding: 2rem 1rem 1.5rem 1rem;
      margin-bottom: 2rem;
      text-align: center;
    }
    .card {
      border: none;
      border-radius: 1rem;
      box-shadow: 0 2px 16px rgba(80,80,200,0.10);
      transition: transform 0.15s, box-shadow 0.15s;
      background: linear-gradient(135deg, #fff 70%, #e0e7ff 100%);
    }
    .card:hover {
      transform: translateY(-4px) scale(1.03);
      box-shadow: 0 8px 32px rgba(80,80,200,0.18);
    }
    .card-title {
      color: #2575fc;
      font-weight: 700;
      letter-spacing: 0.5px;
    }
    .btn-primary {
      background: linear-gradient(90deg, #6a11cb 0%, #2575fc 100%);
      border: none;
      font-weight: 600;
      letter-spacing: 0.5px;
      transition: background 0.2s;
    }
    .btn-primary:hover {
      background: linear-gradient(90deg, #2575fc 0%, #6a11cb 100%);
    }
    .search-bar {
      box-shadow: 0 2px 12px rgba(80,80,200,0.08);
      border-radius: 2rem;
      overflow: hidden;
      background: #fff;
    }
    @media (max-width: 767px) {
      .books-header {
        padding: 1.2rem 0.5rem 1rem 0.5rem;
      }
      .card {
        margin-bottom: 1.5rem;
      }
    }
  </style>
</head>
<body>
  <%- include('partials/navbar') %>
  <div class="container py-4">
    <% if (user) { %>
    <div class="mb-4 p-3 rounded shadow-sm bg-white d-flex align-items-center gap-4" style="border-left:6px solid #6366f1;">
      <div>
        <div class="fw-bold text-primary" style="font-size:1.2rem;">üéÆ Gamification</div>
        <div class="d-flex align-items-center gap-3 mt-2">
          <span class="badge bg-success" style="font-size:1.1rem;">Points : <span id="userPoints"><%= user.points %></span></span>
          <span class="badge bg-warning text-dark" style="font-size:1.1rem;">Niveau : <span id="userLevel"><%= user.level %></span></span>
          <span class="badge bg-info text-dark" style="font-size:1.1rem;">Badges : <span id="userBadges"><%= Array.isArray(user.badges) ? user.badges.join(', ') : user.badges %></span></span>
        </div>
        <div class="progress mt-3" style="height:8px;max-width:300px;">
          <div class="progress-bar bg-primary" id="levelProgress" role="progressbar" style="width:<%= Math.min(100, Math.round((user.points/100)*100)) %>%;"></div>
        </div>
        <small class="text-muted">Gagnez des points en commentant, empruntant ou notant des livres !</small>
      </div>
    </div>
    <% } %>
    <div class="books-header mb-4">
      <h2 class="mb-2 d-flex align-items-center justify-content-center">
        <svg width="32" height="32" fill="currentColor" class="me-2" viewBox="0 0 16 16"><path d="M2 2v12h12V2H2zm11 11H3V3h10v10z"/><path d="M4 4h8v1H4V4zm0 2h8v1H4V6zm0 2h8v1H4V8zm0 2h5v1H4v-1z"/></svg>
        Nos Livres
      </h2>
      <p class="mb-0 fs-5">D√©couvrez notre collection vari√©e et trouvez votre prochain coup de c≈ìur.</p>
    </div>
    <!-- Modern Filter Sidebar -->
    <div class="row">
      <div class="col-lg-3 mb-4">
        <div class="card shadow-sm border-0 p-3 sticky-top" style="top:90px;background:linear-gradient(135deg,#f8fafc 80%,#e0e7ff 100%);">
          <h5 class="mb-3 text-primary d-flex align-items-center gap-2" style="font-weight:700;">
            <svg width="22" height="22" fill="currentColor" class="me-1" viewBox="0 0 16 16"><path d="M6 10.117V14.5a.5.5 0 0 0 .757.429l2.285-1.428A.5.5 0 0 0 9.5 13.5v-3.383l4.447-4.276A.5.5 0 0 0 13.947 5H2.053a.5.5 0 0 0-.353.841L6 10.117z"/></svg>
            Filtres avanc√©s
          </h5>
          <form id="searchBooksForm" autocomplete="off">
            <div class="mb-3">
              <label for="searchQuery" class="form-label fw-semibold">Titre</label>
              <input type="text" class="form-control" id="searchQuery" placeholder="Rechercher par titre...">
            </div>
            <div class="mb-3">
              <label for="authorFilter" class="form-label fw-semibold">Auteur</label>
              <select class="form-select" id="authorFilter">
                <option value="">Tous les auteurs</option>
              </select>
            </div>
            <div class="mb-3">
              <label for="genreFilter" class="form-label fw-semibold">Genre</label>
              <select class="form-select" id="genreFilter">
                <option value="">Tous les genres</option>
              </select>
            </div>
            <div class="mb-3">
              <label for="minPrice" class="form-label fw-semibold">Prix min</label>
              <input type="number" class="form-control" id="minPrice" min="0" placeholder="0">
            </div>
            <div class="mb-3">
              <label for="maxPrice" class="form-label fw-semibold">Prix max</label>
              <input type="number" class="form-control" id="maxPrice" min="0" placeholder="100">
            </div>
            <div class="mb-3">
              <label for="sortBy" class="form-label fw-semibold">Trier par</label>
              <select class="form-select" id="sortBy">
                <option value="">Aucun</option>
                <option value="price">Prix</option>
                <option value="title">Titre</option>
                <option value="author">Auteur</option>
              </select>
            </div>
            <div class="mb-3">
              <label for="sortOrder" class="form-label fw-semibold">Ordre</label>
              <select class="form-select" id="sortOrder">
                <option value="asc">Croissant</option>
                <option value="desc">D√©croissant</option>
              </select>
            </div>
            <button type="submit" class="btn btn-primary w-100 py-2 mt-2" style="font-weight:600;">Rechercher</button>
            <button type="button" class="btn btn-outline-secondary w-100 py-2 mt-2" id="resetFilters">R√©initialiser</button>
          </form>
        </div>
      </div>
      <div class="col-lg-9">
        <div class="row g-4" id="booksContainer">
          <!-- Le contenu sera inject√© dynamiquement par JS -->
        </div>
      </div>
    </div>
    <!-- End Modern Filter Sidebar -->
  </div>
  <%- include('partials/footer') %>
  <% if (user) { %>
    <script>
      window.USER_ID = "<%= user._id %>";
      // Real-time gamification update via Socket.io
      if (typeof io !== 'undefined' && window.USER_ID) {
        const socket = io();
        socket.emit('identify', window.USER_ID);
        socket.on('gamificationUpdate', function(data) {
          if (data) updateGamificationBar(data);
        });
      } else {
        document.addEventListener('DOMContentLoaded', function() {
          if (typeof io !== 'undefined' && window.USER_ID) {
            const socket = io();
            socket.emit('identify', window.USER_ID);
            socket.on('gamificationUpdate', function(data) {
              if (data) updateGamificationBar(data);
            });
          }
        });
      }
    </script>
  <% } %>
  <script src="/js/client.js"></script>
  <script>
    // Helper to get the correct image URL for a book (support uploaded avatars and uploaded book covers)
    function getBookImageUrl(image) {
      if (!image || image.trim() === '') {
        return '/images/books/default-cover.png';
      }
      // If image is an uploaded avatar or uploaded book cover
      if (image.startsWith('/uploads/avatars/') || image.startsWith('/uploads/books/')) {
        return image;
      }
      // If image is a full URL or absolute path
      if (image.startsWith('/') || image.startsWith('http')) {
        return image;
      }
      // Default: images/books
      return '/images/books/' + image;
    }

    // Fonction pour afficher les livres
    function renderBooks(books) {
      const container = document.getElementById('booksContainer');
      container.innerHTML = '';
      if (!books || books.length === 0) {
        // Fallback: show 5 placeholder cards
        for (let i = 0; i < 5; i++) {
          container.innerHTML += `
            <div class="col-12 col-sm-6 col-md-4">
              <div class="card h-100 bg-light text-center">
                <img src="/images/books/default-cover.png" alt="Couverture" class="card-img-top" style="height:130px;width:100px;object-fit:cover;border-radius:0.3rem;box-shadow:0 2px 8px #0001;display:block;margin:1.2rem auto 0 auto;">
                <div class="card-body d-flex flex-column justify-content-center align-items-center">
                  <h5 class="card-title placeholder-glow"><span class="placeholder col-8"></span></h5>
                  <p class="card-text mb-1"><span class="fw-semibold">Auteur :</span> <span class="placeholder col-6"></span></p>
                  <p class="card-text mb-1"><span class="fw-semibold">Genre :</span> <span class="placeholder col-4"></span></p>
                  <p class="card-text mb-2"><span class="fw-semibold">Prix :</span> <span class="placeholder col-2"></span></p>
                  <a href="#" class="btn btn-primary disabled mt-auto placeholder col-6">D√©tails</a>
                </div>
              </div>
            </div>
          `;
        }
        // Optionally, show a message above the placeholders
        container.innerHTML = `<div class='col-12'><div class='alert alert-info text-center'>Aucun livre trouv√©. Voici quelques exemples :</div></div>` + container.innerHTML;
        return;
      }
      books.forEach(book => {
        const imageUrl = getBookImageUrl(book.image);
        container.innerHTML += `
          <div class="col-12 col-sm-6 col-md-4">
            <div class="card h-100">
              <img src="${imageUrl}" alt="Couverture" class="card-img-top" style="height:130px;width:100px;object-fit:cover;border-radius:0.3rem;box-shadow:0 2px 8px #0001;display:block;margin:1.2rem auto 0 auto;" onerror="this.onerror=null;this.src='/images/books/default-cover.png';">
              <div class="card-body d-flex flex-column">
                <h5 class="card-title">${book.title}</h5>
                <p class="card-text mb-1"><span class="fw-semibold">Auteur :</span> ${book.author}</p>
                <p class="card-text mb-1"><span class="fw-semibold">Genre :</span> ${book.genre || ''}</p>
                <p class="card-text mb-2"><span class="fw-semibold">Prix :</span> ${book.price} ‚Ç¨</p>
                <a href="/book/${book._id}" class="btn btn-primary mt-auto">D√©tails</a>
              </div>
            </div>
          </div>
        `;
      });
    }

    // Helper to get unique values from books
    function getUniqueValues(books, key) {
      return [...new Set(books.map(book => book[key]).filter(Boolean))];
    }

    // Populate author and genre filters
    function populateFilters(books) {
      const authorSelect = document.getElementById('authorFilter');
      const genreSelect = document.getElementById('genreFilter');
      const authors = getUniqueValues(books, 'author');
      const genres = getUniqueValues(books, 'genre');
      authorSelect.innerHTML = '<option value="">Tous les auteurs</option>' + authors.map(a => `<option value="${a}">${a}</option>`).join('');
      genreSelect.innerHTML = '<option value="">Tous les genres</option>' + genres.map(g => `<option value="${g}">${g}</option>`).join('');
    }

    // Charger tous les livres au chargement de la page et remplir les filtres
    async function loadAllBooks() {
      const res = await fetch('/api/books');
      const books = await res.json();
      renderBooks(books);
      populateFilters(books);
    }
    document.addEventListener('DOMContentLoaded', loadAllBooks);

    // Filter/search books with all filters
    async function filterBooks(e) {
      if (e) e.preventDefault();
      const query = document.getElementById('searchQuery').value;
      const author = document.getElementById('authorFilter').value;
      const genre = document.getElementById('genreFilter').value;
      const minPrice = document.getElementById('minPrice').value;
      const maxPrice = document.getElementById('maxPrice').value;
      const sortBy = document.getElementById('sortBy').value;
      const sortOrder = document.getElementById('sortOrder').value;
      const body = {
        title: query,
        author,
        genre,
        minPrice: minPrice ? Number(minPrice) : undefined,
        maxPrice: maxPrice ? Number(maxPrice) : undefined,
        sortBy: sortBy || undefined,
        sortOrder: sortOrder || undefined
      };
      const res = await fetch('/api/books/filter', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body)
      });
      const books = await res.json();
      renderBooks(books);
    }
    document.getElementById('searchBooksForm').addEventListener('submit', filterBooks);
    document.getElementById('resetFilters').addEventListener('click', function() {
      document.getElementById('searchQuery').value = '';
      document.getElementById('authorFilter').value = '';
      document.getElementById('genreFilter').value = '';
      document.getElementById('minPrice').value = '';
      document.getElementById('maxPrice').value = '';
      document.getElementById('sortBy').value = '';
      document.getElementById('sortOrder').value = 'asc';
      filterBooks();
    });

    // Update gamification bar in real time
    function updateGamificationBar(data) {
      if (!data) return;
      if (data.points !== undefined) document.getElementById('userPoints').textContent = data.points;
      if (data.level !== undefined) document.getElementById('userLevel').textContent = data.level;
      if (data.badges && data.badges.length) document.getElementById('userBadges').textContent = data.badges.join(', ');
      // Progress bar: percent to next level (assuming 100 points per level)
      if (data.points !== undefined) {
        const percent = Math.min(100, Math.round((data.points / 100) * 100));
        document.getElementById('levelProgress').style.width = percent + '%';
      }
    }
    <% if (user) { %>
    if (typeof io !== 'undefined' && window.USER_ID) {
      const socket = io();
      socket.emit('identify', window.USER_ID);
      socket.on('gamificationUpdate', function(data) {
        if (data) updateGamificationBar(data);
      });
    } else {
      document.addEventListener('DOMContentLoaded', function() {
        if (typeof io !== 'undefined' && window.USER_ID) {
          const socket = io();
          socket.emit('identify', window.USER_ID);
          socket.on('gamificationUpdate', function(data) {
            if (data) updateGamificationBar(data);
          });
        }
      });
    }
    <% } %>

    // Listen for comment form submission and update gamification bar
    if (document.getElementById('commentForm')) {
      document.getElementById('commentForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const text = document.getElementById('commentText').value.trim();
        const rating = window.selectedRating || 0;
        const like = window.like || false;
        const dislike = window.dislike || false;
        const bookId = window.bookId || (typeof bookId !== 'undefined' ? bookId : null);
        if (!bookId) return;
        const res = await fetch(`/api/books/${bookId}/comment`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ text, rating, like, dislike })
        });
        const data = await res.json();
        if (data.gamification) updateGamificationBar(data.gamification);
        // ...existing code for comment UI refresh...
      });
    }

    // Responsive: move filter card above books on mobile
    function moveFilterSidebar() {
      const filterCol = document.querySelector('.col-lg-3');
      const booksCol = document.querySelector('.col-lg-9');
      if (window.innerWidth < 992) {
        if (filterCol && booksCol && filterCol.nextElementSibling !== booksCol) {
          booksCol.parentNode.insertBefore(filterCol, booksCol);
        }
      } else {
        const row = document.querySelector('.container .row');
        if (row && row.firstElementChild !== filterCol) {
          row.insertBefore(filterCol, row.firstElementChild);
        }
      }
    }
    window.addEventListener('resize', moveFilterSidebar);
    document.addEventListener('DOMContentLoaded', moveFilterSidebar);
  </script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <style>
    @media (max-width: 991.98px) {
      .sticky-top { position:static!important; }
    }
  </style>
</body>
</html>