<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <link rel="icon" href="/images/logo.png" />
  <title>Livres - Books garden</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/style.css">
  <style>
    body {
      background: linear-gradient(120deg, #f8fafc 0%, #e0e7ff 100%);
      min-height: 100vh;
    }
    .books-header {
      background: linear-gradient(90deg, #2575fc 0%, #6a11cb 100%);
      color: #fff;
      border-radius: 1rem;
      box-shadow: 0 4px 24px rgba(80,80,200,0.08);
      padding: 2rem 1rem 1.5rem 1rem;
      margin-bottom: 2rem;
      text-align: center;
    }
    .card {
      border: none;
      border-radius: 1rem;
      box-shadow: 0 2px 16px rgba(80,80,200,0.10);
      transition: transform 0.15s, box-shadow 0.15s;
      background: linear-gradient(135deg, #fff 70%, #e0e7ff 100%);
    }
    .card:hover {
      transform: translateY(-4px) scale(1.03);
      box-shadow: 0 8px 32px rgba(80,80,200,0.18);
    }
    .card-title {
      color: #2575fc;
      font-weight: 700;
      letter-spacing: 0.5px;
    }
    .btn-primary {
      background: linear-gradient(90deg, #6a11cb 0%, #2575fc 100%);
      border: none;
      font-weight: 600;
      letter-spacing: 0.5px;
      transition: background 0.2s;
    }
    .btn-primary:hover {
      background: linear-gradient(90deg, #2575fc 0%, #6a11cb 100%);
    }
    .search-bar {
      box-shadow: 0 2px 12px rgba(80,80,200,0.08);
      border-radius: 2rem;
      overflow: hidden;
      background: #fff;
    }
    @media (max-width: 767px) {
      .books-header {
        padding: 1.2rem 0.5rem 1rem 0.5rem;
      }
      .card {
        margin-bottom: 1.5rem;
      }
    }
  </style>
</head>
<body>
  <%- include('partials/navbar') %>
  <div class="container py-4">
    <div class="books-header mb-4">
      <h2 class="mb-2 d-flex align-items-center justify-content-center">
        <svg width="32" height="32" fill="currentColor" class="me-2" viewBox="0 0 16 16"><path d="M2 2v12h12V2H2zm11 11H3V3h10v10z"/><path d="M4 4h8v1H4V4zm0 2h8v1H4V6zm0 2h8v1H4V8zm0 2h5v1H4v-1z"/></svg>
        Nos Livres
      </h2>
      <p class="mb-0 fs-5">Découvrez notre collection variée et trouvez votre prochain coup de cœur.</p>
    </div>
    <form class="mb-4" id="searchBooksForm" autocomplete="off">
      <div class="input-group search-bar mb-2">
        <input type="text" class="form-control border-0 shadow-none" id="searchQuery" placeholder="Rechercher par titre...">
        <button type="submit" class="btn btn-primary px-4">Rechercher</button>
      </div>
      <div class="row g-2 mb-2">
        <div class="col-md-6">
          <select class="form-select" id="authorFilter">
            <option value="">Tous les auteurs</option>
          </select>
        </div>
        <div class="col-md-6">
          <select class="form-select" id="genreFilter">
            <option value="">Tous les genres</option>
          </select>
        </div>
      </div>
    </form>
    <div class="row g-4" id="booksContainer">
      <!-- Le contenu sera injecté dynamiquement par JS -->
    </div>
  </div>
  <%- include('partials/footer') %>
  <script src="/js/client.js"></script>
  <script>
    // Helper to get the correct image URL for a book
    function getBookImageUrl(image) {
      if (!image || image.trim() === '') {
        return '/images/books/default-cover.png';
      }
      if (image.startsWith('/') || image.startsWith('http')) {
        return image;
      }
      return '/images/books/' + image;
    }

    // Fonction pour afficher les livres
    function renderBooks(books) {
      const container = document.getElementById('booksContainer');
      container.innerHTML = '';
      books.forEach(book => {
        const imageUrl = getBookImageUrl(book.image);
        container.innerHTML += `
          <div class="col-12 col-sm-6 col-md-4">
            <div class="card h-100">
              <img src="${imageUrl}" alt="Couverture" class="card-img-top" style="height:220px;object-fit:cover;border-radius:1rem 1rem 0 0;" onerror="this.onerror=null;this.src='/images/books/default-cover.png';">
              <div class="card-body d-flex flex-column">
                <h5 class="card-title">${book.title}</h5>
                <p class="card-text mb-1"><span class="fw-semibold">Auteur :</span> ${book.author}</p>
                <p class="card-text mb-1"><span class="fw-semibold">Genre :</span> ${book.genre || ''}</p>
                <p class="card-text mb-2"><span class="fw-semibold">Prix :</span> ${book.price} €</p>
                <a href="/book/${book._id}" class="btn btn-primary mt-auto">Détails</a>
              </div>
            </div>
          </div>
        `;
      });
    }

    // Helper to get unique values from books
    function getUniqueValues(books, key) {
      return [...new Set(books.map(book => book[key]).filter(Boolean))];
    }

    // Populate author and genre filters
    function populateFilters(books) {
      const authorSelect = document.getElementById('authorFilter');
      const genreSelect = document.getElementById('genreFilter');
      const authors = getUniqueValues(books, 'author');
      const genres = getUniqueValues(books, 'genre');
      authorSelect.innerHTML = '<option value="">Tous les auteurs</option>' + authors.map(a => `<option value="${a}">${a}</option>`).join('');
      genreSelect.innerHTML = '<option value="">Tous les genres</option>' + genres.map(g => `<option value="${g}">${g}</option>`).join('');
    }

    // Charger tous les livres au chargement de la page et remplir les filtres
    async function loadAllBooks() {
      const res = await fetch('/api/books');
      const books = await res.json();
      renderBooks(books);
      populateFilters(books);
    }
    document.addEventListener('DOMContentLoaded', loadAllBooks);

    // Recherche dynamique avec filtres
    document.getElementById('searchBooksForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const query = document.getElementById('searchQuery').value;
      const author = document.getElementById('authorFilter').value;
      const genre = document.getElementById('genreFilter').value;
      const params = new URLSearchParams();
      if (query) params.append('query', query);
      if (author) params.append('author', author);
      if (genre) params.append('genre', genre);
      const res = await fetch(`/api/books/search?${params.toString()}`);
      const books = await res.json();
      renderBooks(books);
    });
  </script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>