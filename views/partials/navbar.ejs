<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
  .navbar {
    background: linear-gradient(90deg, #6a11cb 0%, #2575fc 100%);
  }
  .navbar-brand, .nav-link, .dropdown-item {
    color: #fff !important;
    font-weight: 500;
    letter-spacing: 0.5px;
    text-shadow: 0 1px 8px rgba(0,0,0,0.12), 0 0px 1px #fff;
    /* Modern clear white with subtle shadow for clarity */
  }
  .nav-link.active, .nav-link:hover, .dropdown-item:hover {
    color: #f8f9fa !important;
    background: rgba(255,255,255,0.13);
    border-radius: 0.25rem;
    text-shadow: 0 2px 12px rgba(0,0,0,0.18), 0 0px 2px #fff;
    /* Brighter white on hover for modern effect */
  }
  .navbar-toggler {
    border: none;
    background: #fff;
  }
  .navbar-toggler-icon {
    background-image: url("data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='rgba%28255,255,255,0.7%29' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E");
  }
</style>
<nav class="navbar navbar-expand-lg shadow">
  <div class="container-fluid">
    <a class="navbar-brand d-flex align-items-center" href="/">
      <svg width="32" height="32" fill="currentColor" class="me-2" viewBox="0 0 16 16"><path d="M2 2v12h12V2H2zm11 11H3V3h10v10z"/><path d="M4 4h8v1H4V4zm0 2h8v1H4V6zm0 2h8v1H4V8zm0 2h5v1H4v-1z"/></svg>
      Librairie de Mohamed
    </a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNavDropdown">
      <ul class="navbar-nav ms-auto" id="dynamic-navbar-links">
        <li class="nav-item">
          
        </li>
        <!-- Dynamic links will be injected here -->
      </ul>
    </div>
  </div>
</nav>
<script>
  // Helper to create nav items
  function createNavItem(href, text, extra = '') {
    return `<li class="nav-item"><a class="nav-link" href="${href}" ${extra}>${text}</a></li>`;
  }
  // Helper to create dropdown for admin
  function createAdminDropdown(userId) {
    return `
      <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="adminDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
          Admin
        </a>
        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="adminDropdown" style="background: #2575fc;">
          <li><a class="dropdown-item" href="/admin/users?userId=${userId}">Utilisateurs</a></li>
          <li><a class="dropdown-item" href="/admin/orders?userId=${userId}">Commandes</a></li>
          <li><a class="dropdown-item" href="/admin/stock?userId=${userId}">Stock</a></li>
        </ul>
      </li>
    `;
  }
  // Render navbar links based on user
  async function renderNavbarLinks() {
    const userId = localStorage.getItem('userId');
    const nav = document.getElementById('dynamic-navbar-links');
    let html = '';
    let isAdmin = false;
    if (userId) {
      // Dashboard button styled as regular nav item
      html += createNavItem(`/dashboard?userId=${userId}`, 'Dashboard');
      html += createNavItem(`/books`, 'livres');
      html += createNavItem(`/cart?userId=${userId}`, 'Panier');
      html += createNavItem(`/orders?userId=${userId}`, 'Commandes');
      html += createNavItem(`/profile?userId=${userId}`, 'Profil');
      
      html += createNavItem(`/books/manage?userId=${userId}`, 'Gestion des Livres');
      html += createNavItem(`/orders/manage?userId=${userId}`, 'Gestion des Commandes');
      // Check for admin role by verifying with /api/users endpoint (MongoDB check)
      try {
        const res = await fetch(`/api/users?userId=${userId}`, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });
        const data = await res.json();
        if (
          data.user &&
          data.user.role === 1 &&
          data.user.email === "AdminAdmin@gmail.com"
        ) {
          isAdmin = true;
          // Only show Gestion des Utilisateurs if logged in as AdminAdmin@gmail.com
          html += createNavItem(`/admin/users?userId=${userId}`, 'Gestion des Utilisateurs');
          html += createAdminDropdown(userId);
        }
      } catch (e) {}
      html += createNavItem('#', 'DÃ©connexion', 'onclick="logout();return false;"');
    } else {
      html += createNavItem('/login', 'Connexion');
      html += createNavItem('/register', 'Inscription');
    }
    nav.innerHTML += html;
  }
  document.addEventListener('DOMContentLoaded', renderNavbarLinks);
</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>