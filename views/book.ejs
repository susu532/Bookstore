<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <link rel="icon" href="/images/logo.png" />
  <title><%= book.title %> - Books garden</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/style.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    body {
      background: linear-gradient(135deg, #f8fafc 0%, #e0e7ff 100%);
      min-height: 100vh;
    }
    .book-card {
      border-radius: 1.5rem;
      box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.18);
      background: rgba(255,255,255,0.95);
      padding: 2.5rem 2rem;
      margin-top: 3rem;
      margin-bottom: 3rem;
      transition: box-shadow 0.2s;
    }
    .book-card:hover {
      box-shadow: 0 16px 48px 0 rgba(31, 38, 135, 0.25);
    }
    .book-title {
      color: #4f46e5;
      font-weight: 700;
      font-size: 2.5rem;
      margin-bottom: 1rem;
      letter-spacing: -1px;
    }
    .badge-genre {
      background: linear-gradient(90deg, #6366f1 0%, #06b6d4 100%);
      color: #fff;
      font-size: 1rem;
      border-radius: 0.75rem;
      padding: 0.5em 1em;
      margin-left: 0.5em;
    }
    .price-tag {
      color: #10b981;
      font-size: 1.5rem;
      font-weight: 600;
    }
    .form-label {
      font-weight: 500;
      color: #6366f1;
    }
    .btn-primary {
      background: linear-gradient(90deg, #6366f1 0%, #06b6d4 100%);
      border: none;
      font-weight: 600;
      letter-spacing: 0.5px;
      transition: background 0.2s;
    }
    .btn-primary:hover {
      background: linear-gradient(90deg, #06b6d4 0%, #6366f1 100%);
    }
    @media (max-width: 576px) {
      .book-card {
        padding: 1.2rem 0.5rem;
      }
      .book-title {
        font-size: 2rem;
      }
    }
  </style>
</head>
<body>
  <%- include('partials/navbar', { user }) %>
  <!-- Wishlist Navbar Widget -->
  <% if (user) { %>
    <nav class="navbar navbar-expand-lg navbar-light bg-light mb-2">
      <div class="container-fluid">
        <!-- ...existing navbar content... -->
        <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
          <!-- ...other nav items... -->
          <li class="nav-item">
            <a class="nav-link position-relative" href="/wishlist" id="wishlistNavLink">
              <i class="bi bi-heart-fill text-danger"></i>
              <span id="wishlistCount" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="font-size:0.8em;">
                <%= user.wishlist ? user.wishlist.length : 0 %>
              </span>
              Favoris
            </a>
          </li>
        </ul>
      </div>
    </nav>
  <% } %>
  <div class="container">
    <div class="row justify-content-center">
      <div class="col-lg-7 col-md-9">
        <div class="book-card shadow-lg">
          <div class="row g-4 align-items-center">
            <div class="col-md-5 text-center mb-3 mb-md-0">
              <% if (book.image) { %>
                <img src="<%= book.image %>" alt="Couverture" class="img-fluid rounded shadow"
                  style="height:320px;width:240px;object-fit:cover;border-radius:0.3rem;box-shadow:0 2px 8px #0001;display:block;margin:auto;">
              <% } else { %>
                <img src="/images/books/default-cover.png" alt="Couverture par défaut" class="img-fluid rounded shadow"
                  style="height:320px;width:240px;object-fit:cover;border-radius:0.3rem;box-shadow:0 2px 8px #0001;display:block;margin:auto;">
                <!-- Alternatively, use DiceBear fallback: -->
                <!-- <img src="https://api.dicebear.com/7.x/initials/svg?seed=<%= encodeURIComponent(book.title || 'B') %>" alt="Couverture générée" class="img-fluid rounded shadow" style="height:320px;width:240px;object-fit:cover;border-radius:0.3rem;box-shadow:0 2px 8px #0001;display:block;margin:auto;"> -->
              <% } %>
            </div>
            <div class="col-md-7">
              <div class="d-flex align-items-center mb-3 flex-wrap">
                <h2 class="book-title mb-0"><%= book.title %></h2>
                <span class="badge badge-genre ms-2"><%= book.genre %></span>
              </div>
              <!-- Wishlist/Favorites Button -->
              <% if (user) { %>
                <div class="mb-2">
                  <button id="wishlistBtn" class="btn btn-outline-secondary btn-sm">
                    <i class="bi <%= user.wishlist && user.wishlist.includes(book._id.toString()) ? 'bi-heart-fill text-danger' : 'bi-heart' %>"></i>
                    <span id="wishlistBtnText"><%= user.wishlist && user.wishlist.includes(book._id.toString()) ? 'Retirer des favoris' : 'Ajouter aux favoris' %></span>
                  </button>
                  <% if (user.wishlist && user.wishlist.includes(book._id.toString())) { %>
                    <button id="moveToCartBtn" class="btn btn-outline-primary btn-sm ms-2">
                      <i class="bi bi-cart-plus"></i> Déplacer vers le panier
                    </button>
                  <% } %>
                </div>
              <% } %>
              <p class="mb-2"><strong class="text-primary">Auteur :</strong> <span class="text-dark"><%= book.author %></span></p>
              <p class="mb-2"><strong class="text-primary">Prix :</strong> <span class="price-tag"><%= book.price %> €</span></p>
              <p class="mb-2"><strong class="text-primary">Description :</strong> <span class="text-secondary"><%= book.description || 'Aucune description disponible' %></span></p>
              <p class="mb-4"><strong class="text-primary">Stock :</strong> <span class="<%= book.stock > 0 ? 'text-success' : 'text-danger' %> fw-bold"><%= book.stock %></span></p>
              <div class="book-details">
                <% if (user && book.stock > 0) { %>
                  <button class="btn btn-primary" onclick="emprunterLivre('<%= book._id %>')">Emprunter</button>
                <% } else if (book.stock === 0) { %>
                  <span class="badge badge-warning">Indisponible</span>
                <% } else if (!user) { %>
                  <a href="/login" class="btn btn-outline-primary">Connectez-vous pour emprunter</a>
                <% } %>
              </div>
              <form id="addToCartForm" class="needs-validation" novalidate>
                <input type="hidden" name="bookId" value="<%= book._id %>">
                <div class="mb-3">
                  <label for="quantity" class="form-label">Quantité</label>
                  <input type="number" class="form-control form-control-lg" id="quantity" min="1" max="<%= book.stock %>" value="1" required style="max-width:120px;">
                  <div class="invalid-feedback">
                    Veuillez entrer une quantité valide.
                  </div>
                </div>
                <button type="submit" class="btn btn-primary btn-lg w-100" <%= book.stock === 0 ? 'disabled' : '' %>>
                  <i class="bi bi-cart-plus"></i> Ajouter au panier
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="container mb-5">
    <div class="row justify-content-center">
      <div class="col-lg-8">
        <div class="card p-4 shadow-sm mb-4">
          <h4 class="mb-3">Commentaires & Avis</h4>
          <% if (user) { %>
          <form id="commentForm" class="mb-4">
            <div class="mb-2">
              <label for="commentText" class="form-label">Votre commentaire</label>
              <textarea class="form-control" id="commentText" rows="2" required></textarea>
            </div>
            <div class="mb-2 d-flex align-items-center gap-2">
              <label class="form-label mb-0">Note :</label>
              <span id="starRating">
                <i class="bi bi-star" data-value="1"></i>
                <i class="bi bi-star" data-value="2"></i>
                <i class="bi bi-star" data-value="3"></i>
                <i class="bi bi-star" data-value="4"></i>
                <i class="bi bi-star" data-value="5"></i>
              </span>
              <input type="hidden" id="ratingValue" value="0">
            </div>
            <div class="mb-2 d-flex align-items-center gap-2">
              <button type="button" class="btn btn-outline-success btn-sm" id="likeBtn"><i class="bi bi-hand-thumbs-up"></i> Like</button>
              <button type="button" class="btn btn-outline-danger btn-sm" id="dislikeBtn"><i class="bi bi-hand-thumbs-down"></i> Dislike</button>
            </div>
            <button type="submit" class="btn btn-primary">Envoyer</button>
          </form>
          <% } else { %>
            <div class="alert alert-info">Connectez-vous pour commenter et noter ce livre.</div>
          <% } %>
          <div id="commentsList"></div>
        </div>
      </div>
    </div>
  </div>
  <div class="container">
    <%- include('partials/footer') %>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <!-- Socket.io client for real-time wishlist -->
  <script src="/socket.io/socket.io.js"></script>
  <script>
    // Bootstrap validation
    (() => {
      'use strict'
      const forms = document.querySelectorAll('.needs-validation')
      Array.from(forms).forEach(form => {
        form.addEventListener('submit', event => {
          if (!form.checkValidity()) {
            event.preventDefault()
            event.stopPropagation()
          }
          form.classList.add('was-validated')
        }, false)
      })
    })()
    // Commentaires & avis
    const bookId = '<%= book._id %>';
    const currentUserId = '<%= user ? user._id : "" %>';
    let selectedRating = 0;
    let like = false;
    let dislike = false;

    function renderComments(comments) {
      const list = document.getElementById('commentsList');
      if (!comments.length) {
        list.innerHTML = '<div class="text-muted">Aucun commentaire pour ce livre.</div>';
        return;
      }
      let avg = 0, count = 0;
      comments.forEach(c => { if (c.rating) { avg += c.rating; count++; } });
      avg = count ? (avg / count).toFixed(1) : '-';
      let html = `<div class="mb-2"><strong>Note moyenne :</strong> <span class="text-warning">${avg} <i class="bi bi-star-fill"></i></span> (${count} avis)</div>`;
      html += comments.map(c => {
        const isOwner = currentUserId && c.user === currentUserId;
        // Use icons for stars and like/dislike
        let stars = '';
        for (let i = 1; i <= 5; i++) {
          stars += `<i class='bi ${i <= (c.rating || 0) ? 'bi-star-fill text-warning' : 'bi-star text-secondary'}'></i>`;
        }
        // Avatar logic: use c.avatar if present, else fallback
        const avatarImg = c.avatar
          ? `<img src="${c.avatar}" alt="avatar" class="rounded-circle me-2 comment-avatar" data-userid="${c.user}" style="width:36px;height:36px;object-fit:cover;">`
          : `<img src="https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(c.username || 'U')}" alt="avatar" class="rounded-circle me-2 comment-avatar" data-userid="${c.user}" style="width:36px;height:36px;object-fit:cover;">`;
        return `
          <div class="border rounded p-2 mb-2 comment-item" data-comment-id="${c._id}">
            <div class="d-flex align-items-center mb-1">
              ${avatarImg}
              <span class="fw-bold me-2">${c.username || 'Utilisateur'}</span>
              <span class="ms-2">${stars}</span>
              ${c.like ? '<i class="bi bi-hand-thumbs-up-fill text-success ms-2" title="Like"></i>' : ''}
              ${c.dislike ? '<i class="bi bi-hand-thumbs-down-fill text-danger ms-2" title="Dislike"></i>' : ''}
              <span class="ms-auto text-muted" style="font-size:0.9em;">${new Date(c.createdAt).toLocaleString()}</span>
              ${isOwner ? `<button class="btn btn-link btn-sm text-primary edit-comment-btn ms-2" title="Modifier"><i class="bi bi-pencil"></i></button><button class="btn btn-link btn-sm text-danger delete-comment-btn" title="Supprimer"><i class="bi bi-trash"></i></button>` : ''}
            </div>
            <div class="comment-text">${c.text}</div>
          </div>
        `;
      }).join('');
      list.innerHTML = html;
      // Add event listeners for edit/delete
      if (currentUserId) {
        document.querySelectorAll('.edit-comment-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            const item = this.closest('.comment-item');
            const commentId = item.getAttribute('data-comment-id');
            const textDiv = item.querySelector('.comment-text');
            const oldText = textDiv.textContent;
            textDiv.innerHTML = `<textarea class='form-control mb-2 edit-comment-text'>${oldText}</textarea><button class='btn btn-success btn-sm save-edit-btn me-2'>Enregistrer</button><button class='btn btn-secondary btn-sm cancel-edit-btn'>Annuler</button>`;
            item.querySelector('.save-edit-btn').addEventListener('click', async function() {
              const newText = item.querySelector('.edit-comment-text').value;
              const res = await fetch(`/api/books/comment/${commentId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ text: newText })
              });
              if (res.ok) loadComments();
            });
            item.querySelector('.cancel-edit-btn').addEventListener('click', function() {
              textDiv.textContent = oldText;
            });
          });
        });
        document.querySelectorAll('.delete-comment-btn').forEach(btn => {
          btn.addEventListener('click', async function() {
            if (!confirm('Supprimer ce commentaire ?')) return;
            const item = this.closest('.comment-item');
            const commentId = item.getAttribute('data-comment-id');
            const res = await fetch(`/api/books/comment/${commentId}`, { method: 'DELETE' });
            if (res.ok) loadComments();
          });
        });
      }
    }

    async function loadComments() {
      const res = await fetch(`/api/books/${bookId}/comments`);
      const comments = await res.json();
      renderComments(comments);
    }
    loadComments();
  </script>
  <% if (user) { %>
  <script>
    // Star rating UI
    document.querySelectorAll('#starRating .bi-star').forEach(star => {
      star.addEventListener('mouseenter', function() {
        const val = +this.getAttribute('data-value');
        document.querySelectorAll('#starRating .bi-star, #starRating .bi-star-fill').forEach(s => {
          s.classList.toggle('bi-star-fill', +s.getAttribute('data-value') <= val);
          s.classList.toggle('bi-star', +s.getAttribute('data-value') > val);
        });
      });
      star.addEventListener('mouseleave', function() {
        document.querySelectorAll('#starRating .bi-star, #starRating .bi-star-fill').forEach(s => {
          s.classList.toggle('bi-star-fill', +s.getAttribute('data-value') <= selectedRating);
          s.classList.toggle('bi-star', +s.getAttribute('data-value') > selectedRating);
        });
      });
      star.addEventListener('click', function() {
        selectedRating = +this.getAttribute('data-value');
        document.getElementById('ratingValue').value = selectedRating;
        updateEnvoyerBtn();
      });
    });
    // Like/dislike UI
    document.getElementById('likeBtn').addEventListener('click', function() {
      like = !like; dislike = false;
      this.classList.toggle('btn-success', like);
      this.querySelector('i').classList.toggle('bi-hand-thumbs-up-fill', like);
      this.querySelector('i').classList.toggle('bi-hand-thumbs-up', !like);
      document.getElementById('dislikeBtn').classList.remove('btn-danger');
      document.getElementById('dislikeBtn').querySelector('i').classList.remove('bi-hand-thumbs-down-fill');
      document.getElementById('dislikeBtn').querySelector('i').classList.add('bi-hand-thumbs-down');
      updateEnvoyerBtn();
    });
    document.getElementById('dislikeBtn').addEventListener('click', function() {
      dislike = !dislike; like = false;
      this.classList.toggle('btn-danger', dislike);
      this.querySelector('i').classList.toggle('bi-hand-thumbs-down-fill', dislike);
      this.querySelector('i').classList.toggle('bi-hand-thumbs-down', !dislike);
      document.getElementById('likeBtn').classList.remove('btn-success');
      document.getElementById('likeBtn').querySelector('i').classList.remove('bi-hand-thumbs-up-fill');
      document.getElementById('likeBtn').querySelector('i').classList.add('bi-hand-thumbs-up');
      updateEnvoyerBtn();
    });
    // Submit comment
    document.getElementById('commentForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      const text = document.getElementById('commentText').value.trim();
      const rating = selectedRating;
      // Always send like/dislike as booleans
      const res = await fetch(`/api/books/${bookId}/comment`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text, rating, like: !!like, dislike: !!dislike })
      });
      if (res.ok) {
        document.getElementById('commentText').value = '';
        selectedRating = 0; like = false; dislike = false;
        document.querySelectorAll('#starRating .bi-star, #starRating .bi-star-fill').forEach(s => {
          s.classList.remove('bi-star-fill');
          s.classList.add('bi-star');
        });
        document.getElementById('likeBtn').classList.remove('btn-success');
        document.getElementById('likeBtn').querySelector('i').classList.remove('bi-hand-thumbs-up-fill');
        document.getElementById('likeBtn').querySelector('i').classList.add('bi-hand-thumbs-up');
        document.getElementById('dislikeBtn').classList.remove('btn-danger');
        document.getElementById('dislikeBtn').querySelector('i').classList.remove('bi-hand-thumbs-down-fill');
        document.getElementById('dislikeBtn').querySelector('i').classList.add('bi-hand-thumbs-down');
        updateEnvoyerBtn();
        await loadComments();
      } else {
        const data = await res.json();
        alert(data.message || 'Erreur lors de l\'envoi du commentaire.');
      }
    });
    // Fix Envoyer button: disable if no comment or rating/like/dislike
    const envoyerBtn = document.querySelector('#commentForm button[type="submit"]');
    function updateEnvoyerBtn() {
      const text = document.getElementById('commentText').value.trim();
      envoyerBtn.disabled = !text && !selectedRating && !like && !dislike;
    }
    document.getElementById('commentText').addEventListener('input', updateEnvoyerBtn);
    document.querySelectorAll('#starRating .bi-star').forEach(star => {
      star.addEventListener('click', updateEnvoyerBtn);
    });
    document.getElementById('likeBtn').addEventListener('click', updateEnvoyerBtn);
    document.getElementById('dislikeBtn').addEventListener('click', updateEnvoyerBtn);
    updateEnvoyerBtn();
  </script>
  <% } %>
  <script>
    // Wishlist/Favorites logic
    <% if (user) { %>
    const wishlistBtn = document.getElementById('wishlistBtn');
    const wishlistBtnText = document.getElementById('wishlistBtnText');
    let moveToCartBtn = document.getElementById('moveToCartBtn');
    let inWishlist = <%= user.wishlist && user.wishlist.includes(book._id.toString()) ? 'true' : 'false' %>;
    const wishlistCount = document.getElementById('wishlistCount');
    // Always connect socket after DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Only connect if user is present
      let socket;
      if (typeof io !== 'undefined') {
        socket = io({ transports: ['websocket', 'polling'] });
      }

      function updateWishlistCount(count) {
        if (wishlistCount) wishlistCount.textContent = count;
      }

      if (wishlistBtn) {
        wishlistBtn.addEventListener('click', async function() {
          if (!inWishlist) {
            const res = await fetch('/api/wishlist/<%= book._id %>', { method: 'POST' });
            if (res.ok) {
              inWishlist = true;
              wishlistBtn.querySelector('i').classList.remove('bi-heart');
              wishlistBtn.querySelector('i').classList.add('bi-heart-fill', 'text-danger');
              wishlistBtnText.textContent = 'Retirer des favoris';
              if (!moveToCartBtn) {
                moveToCartBtn = document.createElement('button');
                moveToCartBtn.id = 'moveToCartBtn';
                moveToCartBtn.className = 'btn btn-outline-primary btn-sm ms-2';
                moveToCartBtn.innerHTML = '<i class="bi bi-cart-plus"></i> Déplacer vers le panier';
                wishlistBtn.parentNode.appendChild(moveToCartBtn);
                moveToCartBtn.addEventListener('click', moveToCartHandler);
              }
              if (socket) socket.emit('wishlistChanged', { userId: '<%= user._id %>' });
            }
          } else {
            const res = await fetch('/api/wishlist/<%= book._id %>', { method: 'DELETE' });
            if (res.ok) {
              inWishlist = false;
              wishlistBtn.querySelector('i').classList.remove('bi-heart-fill', 'text-danger');
              wishlistBtn.querySelector('i').classList.add('bi-heart');
              wishlistBtnText.textContent = 'Ajouter aux favoris';
              if (moveToCartBtn) { moveToCartBtn.remove(); moveToCartBtn = null; }
              if (socket) socket.emit('wishlistChanged', { userId: '<%= user._id %>' });
            }
          }
        });
      }
      function moveToCartHandler() {
        fetch('/api/wishlist/<%= book._id %>/move-to-cart', { method: 'POST' })
          .then(res => {
            if (res.ok) {
              alert('Déplacé vers le panier !');
              if (wishlistBtn) {
                inWishlist = false;
                wishlistBtn.querySelector('i').classList.remove('bi-heart-fill', 'text-danger');
                wishlistBtn.querySelector('i').classList.add('bi-heart');
                wishlistBtnText.textContent = 'Ajouter aux favoris';
              }
              if (moveToCartBtn) { moveToCartBtn.remove(); moveToCartBtn = null; }
              if (socket) socket.emit('wishlistChanged', { userId: '<%= user._id %>' });
            } else {
              alert('Erreur lors du déplacement vers le panier.');
            }
          });
      }
      if (moveToCartBtn) moveToCartBtn.addEventListener('click', moveToCartHandler);

      // Listen for real-time wishlist updates
      if (socket) {
        socket.on('wishlistUpdate', function(data) {
          if (data && data.userId === '<%= user._id %>') {
            updateWishlistCount(data.count);
          }
        });
      }
    });
    <% } %>
  </script>
  <script src="/js/client.js"></script>
</body>
</html>