<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <link rel="icon" href="/images/logo.png" />
  <title>Commandes - Books garden</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/style.css">
  <style>
    /* Modern, colorful, and responsive enhancements */
    body {
      background: linear-gradient(135deg, #f8fafc 0%, #e0e7ff 100%);
      min-height: 100vh;
    }
    .orders-header {
      background: linear-gradient(90deg, #6366f1 0%, #06b6d4 100%);
      color: #fff;
      border-radius: 1rem 1rem 0 0;
      padding: 2rem 1rem 1rem 1rem;
      box-shadow: 0 4px 12px rgba(99,102,241,0.08);
      text-align: center;
      margin-bottom: 2rem;
    }
    .order-card {
      border: none;
      border-radius: 1rem;
      box-shadow: 0 2px 8px rgba(99,102,241,0.10);
      margin-bottom: 2rem;
      background: #fff;
      transition: transform 0.15s;
    }
    .order-card:hover {
      transform: translateY(-4px) scale(1.01);
      box-shadow: 0 6px 24px rgba(6,182,212,0.13);
    }
    .order-date {
      font-size: 1.1rem;
      font-weight: 500;
      color: #6366f1;
    }
    .order-total {
      font-size: 1.2rem;
      font-weight: bold;
      color: #06b6d4;
    }
    .book-list li {
      background: #f1f5f9;
      border-radius: 0.5rem;
      margin-bottom: 0.5rem;
      padding: 0.5rem 1rem;
      color: #334155;
      font-size: 1rem;
    }
    @media (max-width: 576px) {
      .orders-header {
        font-size: 1.5rem;
        padding: 1.2rem 0.5rem 0.7rem 0.5rem;
      }
      .order-card {
        padding: 1rem;
      }
    }
  </style>
</head>
<body>
  <% if (user && user.role === 1) { %>
    <nav class="sidebar d-flex flex-column gap-3 align-items-center align-items-md-stretch" style="min-height:100vh;background:linear-gradient(180deg,#6366f1 0%,#06b6d4 100%);color:#fff;padding:2rem 1rem;position:fixed;top:0;left:0;width:240px;z-index:100;box-shadow:2px 0 16px rgba(99,102,241,0.10);">
      <div class="sidebar-logo mb-4 text-center w-100" style="font-size:1.5rem;font-weight:700;letter-spacing:0.05em;">
        <img src="/images/logo.png" alt="Logo" style="height:40px;vertical-align:middle;"> <span>Admin</span>
      </div>
      <a href="/dashboard" class="nav-link w-100 d-flex align-items-center gap-2 px-3 py-2 rounded" style="color:#fff;font-size:1.1rem;"><i class="bi bi-speedometer2"></i> Tableau de bord</a>
      <a href="/books/manage" class="nav-link w-100 d-flex align-items-center gap-2 px-3 py-2 rounded" style="color:#fff;font-size:1.1rem;"><i class="bi bi-journal-text"></i> Gérer les livres</a>
      <a href="/admin/users" class="nav-link w-100 d-flex align-items-center gap-2 px-3 py-2 rounded" style="color:#fff;font-size:1.1rem;"><i class="bi bi-people"></i> Gérer les utilisateurs</a>
      <a href="/admin/orders" class="nav-link w-100 d-flex align-items-center gap-2 px-3 py-2 rounded" style="color:#fff;font-size:1.1rem;"><i class="bi bi-bag-check"></i> Gérer les commandes</a>
      <a href="/admin/emprunts" class="nav-link w-100 d-flex align-items-center gap-2 px-3 py-2 rounded" style="color:#fff;font-size:1.1rem;"><i class="bi bi-clock-history"></i> Gérer les emprunts</a>
      <a href="/admin/stock" class="nav-link w-100 d-flex align-items-center gap-2 px-3 py-2 rounded" style="color:#fff;font-size:1.1rem;"><i class="bi bi-box-seam"></i> Stock</a>
      <a href="/admin/reviews" class="nav-link w-100 d-flex align-items-center gap-2 px-3 py-2 rounded"><i class="bi bi-chat-left-text"></i> Modération Avis <span id="pendingReviewsCount" class="badge bg-danger ms-1" style="display:none;">0</span></a>
      <a href="/logout" class="nav-link w-100 d-flex align-items-center gap-2 px-3 py-2 rounded" style="color:#fff;font-size:1.1rem;"><i class="bi bi-box-arrow-right"></i> Déconnexion</a>
    </nav>
    <div style="margin-left:260px;">
  <% } else { %>
    <div>
  <% } %>
  
  <div class="container py-4">
    <div class="orders-header shadow">
      <h2 class="mb-0"><i class="bi bi-bag-check-fill me-2"></i>Historique de toutes les commandes</h2>
      <p class="mb-0" style="font-size:1.1rem;">Consultez l'historique de toutes les commandes des utilisateurs.</p>
    </div>
    <div class="row mb-4">
      <div class="col-md-6 mx-auto">
        <input type="text" id="orderSearchInput" class="form-control" placeholder="Rechercher par nom, email, livre...">
      </div>
    </div>
    <div class="row justify-content-center" id="ordersList">
      <!-- Les commandes seront injectées dynamiquement par JS -->
    </div>
  </div>
  <div class="container mt-5">
    <%- include('../partials/footer') %>
  </div>
  <!-- Bootstrap Icons CDN for icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/js/client.js"></script>
  <script>
    // Rendu dynamique des commandes
    function renderOrders(orders) {
      const list = document.getElementById('ordersList');
      list.innerHTML = '';
      if (!orders.length) {
        list.innerHTML = `<div class="alert alert-info text-center mt-4 shadow-sm" role="alert">
          <i class="bi bi-info-circle-fill me-2"></i>Aucune commande trouvée.
        </div>`;
        return;
      }
      orders.forEach(order => {
        const userName = order.user && order.user.name ? order.user.name : 'Utilisateur inconnu';
        const userEmail = order.user && order.user.email ? order.user.email : '';
        const booksData = order.books.map(item => item.book.title.toLowerCase()).join(' ');
        const orderDate = new Date(order.createdAt).toLocaleDateString();
        const booksList = order.books.map(item => `
          <li>
            <span class="fw-semibold">${item.book.title}</span>
            <span class="badge bg-gradient bg-info text-dark ms-2">Quantité : ${item.quantity}</span>
          </li>
        `).join('');
        list.innerHTML += `
          <div class="col-12 col-md-8 col-lg-6 order-item" data-user="${userName.toLowerCase()} ${userEmail.toLowerCase()}" data-books="${booksData}">
            <div class="card order-card">
              <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-2">
                  <span class="order-date"><i class="bi bi-calendar-event me-1"></i>Date : ${orderDate}</span>
                  <span class="order-total"><i class="bi bi-currency-euro me-1"></i>${order.total} €</span>
                </div>
                <div class="mb-2">
                  <span class="fw-bold text-secondary"><i class="bi bi-person-circle me-1"></i>Utilisateur : ${userName} &lt;${userEmail}&gt;</span>
                </div>
                <hr>
                <h6 class="mb-2 text-primary"><i class="bi bi-book-half me-1"></i>Livres commandés :</h6>
                <ul class="list-unstyled book-list mb-0">${booksList}</ul>
              </div>
            </div>
          </div>
        `;
      });
    }

    // Charger toutes les commandes au chargement de la page
    async function loadAllOrders() {
      try {
        const res = await fetch('/api/admin/orders');
        if (!res.ok) throw new Error('Erreur lors du chargement des commandes');
        const orders = await res.json();
        renderOrders(orders);
      } catch (err) {
        document.getElementById('ordersList').innerHTML = `<div class="alert alert-danger text-center mt-4 shadow-sm" role="alert">
          <i class="bi bi-exclamation-triangle-fill me-2"></i>Erreur lors du chargement des commandes.
        </div>`;
      }
    }
    document.addEventListener('DOMContentLoaded', loadAllOrders);

    // Recherche dynamique
    const orderSearchInput = document.getElementById('orderSearchInput');
    if (orderSearchInput) {
      orderSearchInput.addEventListener('input', function() {
        const value = this.value.toLowerCase();
        document.querySelectorAll('.order-item').forEach(function(item) {
          const user = item.getAttribute('data-user') || '';
          const books = item.getAttribute('data-books') || '';
          if (user.includes(value) || books.includes(value)) {
            item.style.display = '';
          } else {
            item.style.display = 'none';
          }
        });
      });
    }

    // Charger tous les emprunts au chargement de la page (si affichage des emprunts requis sur cette page)
    async function loadAllEmprunts() {
      try {
        const res = await fetch('/api/admin/emprunts');
        if (!res.ok) throw new Error('Erreur lors du chargement des emprunts');
        const emprunts = await res.json();
        // Ajoutez ici le rendu dynamique des emprunts si besoin, par exemple :
        // renderEmprunts(emprunts);
        // (À compléter selon la structure d'affichage souhaitée)
        // Pour l'instant, affichage console pour debug :
        console.log('Emprunts chargés:', emprunts);
      } catch (err) {
        // Affichage d'une erreur dans la console ou dans le DOM si besoin
        console.error('Erreur lors du chargement des emprunts');
      }
    }
    // Décommentez la ligne suivante si vous souhaitez charger les emprunts au chargement de la page :
    // document.addEventListener('DOMContentLoaded', loadAllEmprunts);
  </script>
</body>
</html>